script AnimationSwitcher {
  props Animation_Files {
    animation_glb: string {
      default: "",
      description: "GLB file with animations to apply to this object",
      once: true
    }
  }
  
  props Animation_Control {
    auto_rotate: boolean {
      default: true,
      description: "Auto-rotate character for better viewing"
    }
    
    rotation_speed: range {
      default: 0.5,
      min: 0.0,
      max: 2.0,
      description: "Auto-rotation speed"
    }
    
    animation_speed: range {
      default: 1.0,
      min: 0.1,
      max: 3.0,
      description: "Animation playback speed"
    }
  }
  
  # Animation state
  current_animation_index = 0
  time_elapsed = 0.0
  rotation_y = 0.0
  available_animations = []
  initialized = false
  animation_loaded = false
  last_animation_glb = ""
  
  start {
    log("🎬 Animation Switcher Started")
    log("📂 Attach to animated GLB model or set animation_glb file")
    log("🎮 Use keys 1-5 to switch between animations")
    
    add_tag("animation_controller")
  }
  
  once {
    # Load animations from GLB if specified
    if (animation_glb != "") {
      log("📁 Animation GLB property set to: " + animation_glb)
      log("🎯 Target object for animation loading")
      target_obj = get_this_object()
      log("🔄 Calling load_animations_from_glb...")
      load_animations_from_glb(target_obj, animation_glb)
    } else {
      log("📂 No animation_glb specified")
    }
    
    # Check if this object has animations
    if (has_skeleton()) {
      log("✅ Skeleton found - scanning for animations")
      
      # Get all available animation ranges
      available_animations = get_animation_ranges()
      log("📊 Found " + String(available_animations.length) + " animation ranges")
      
      # Start with first animation if available
      if (available_animations.length > 0) {
        for (i = 0; i < available_animations.length; i++) {
          log("🎭 Animation " + String(i + 1) + ": " + available_animations[i])
        }
        
        play_idle_animation()
        set_animation_speed(animation_speed)
        log("▶️ Playing idle animation")
        initialized = true
      }
    } else {
      log("⚠️ No skeleton found - attach this script to an animated model or specify animation_glb")
    }
  }
  
  update(dt) {
    time_elapsed = time_elapsed + dt
    
    # Check if animation_glb property has changed
    if (animation_glb != "" && animation_glb != last_animation_glb && !animation_loaded) {
      log("🔄 Animation GLB property changed to: " + animation_glb)
      target_obj = get_this_object()
      log("🎯 Loading animations from GLB...")
      load_animations_from_glb(target_obj, animation_glb)
      last_animation_glb = animation_glb
      animation_loaded = true
    }
    
    # Re-scan for animations after a delay to allow async loading to complete
    if (animation_loaded && !initialized && time_elapsed > 1.0) {
      if (has_skeleton()) {
        available_animations = get_animation_ranges()
        log("📊 Re-scanned - Found " + String(available_animations.length) + " animation ranges")
        if (available_animations.length > 0) {
          for (i = 0; i < available_animations.length; i++) {
            log("🎭 Animation " + String(i + 1) + ": " + available_animations[i])
          }
          
          # Play the first available animation (which should be the loaded one)
          play_animation_range(available_animations[0])
          set_animation_speed(animation_speed)
          log("▶️ Playing animation: " + available_animations[0])
          initialized = true
        }
      }
    }
    
    # Only process input if we have animations
    if (!initialized || available_animations.length == 0) {
      return
    }
    
    # Handle keyboard input for animation switching
    if (is_key_just_pressed("1") && available_animations.length > 0) {
      stop_animation()
      current_animation_index = 0
      play_animation_range(available_animations[0])
      set_animation_speed(animation_speed)
      log("🔄 Switched to: " + available_animations[0])
    } else if (is_key_just_pressed("2") && available_animations.length > 1) {
      stop_animation()
      current_animation_index = 1
      play_animation_range(available_animations[1])
      set_animation_speed(animation_speed)
      log("🔄 Switched to: " + available_animations[1])
    } else if (is_key_just_pressed("3") && available_animations.length > 2) {
      stop_animation()
      current_animation_index = 2
      play_animation_range(available_animations[2])
      set_animation_speed(animation_speed)
      log("🔄 Switched to: " + available_animations[2])
    } else if (is_key_just_pressed("4") && available_animations.length > 3) {
      stop_animation()
      current_animation_index = 3
      play_animation_range(available_animations[3])
      set_animation_speed(animation_speed)
      log("🔄 Switched to: " + available_animations[3])
    } else if (is_key_just_pressed("5") && available_animations.length > 4) {
      stop_animation()
      current_animation_index = 4
      play_animation_range(available_animations[4])
      set_animation_speed(animation_speed)
      log("🔄 Switched to: " + available_animations[4])
    }
    
    # Auto-rotate character for better view
    if (auto_rotate) {
      rotation_y = rotation_y + rotation_speed * dt
      set_rotation(0.0, rotation_y, 0.0)
    }
  }
  
  destroy {
    log("🔚 Animation Switcher destroyed")
    stop_animation()
    remove_tag("animation_controller")
  }
}