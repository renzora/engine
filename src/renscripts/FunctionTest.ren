script FunctionTestDemo {
  props Test_Settings {
    enable_functions: boolean {
      default: true,
      description: "Enable custom function testing"
    }
    
    function_delay: range {
      default: 1000.0,
      min: 100.0,
      max: 5000.0,
      description: "Delay between function calls"
    }
  }
  
  # State variables
  time_elapsed = 0.0
  last_function_call = 0.0
  function_counter = 0
  
  # Custom helper function for complex calculations
  calculate_wave_position(time, amplitude, frequency) {
    x_offset = sin(time * frequency) * amplitude
    y_offset = cos(time * frequency * 0.7) * amplitude * 0.5
    z_offset = sin(time * frequency * 1.3) * amplitude * 0.3
    
    return [x_offset, y_offset, z_offset]
  }
  
  # Custom function for setting up visual effects
  apply_visual_effects(red_factor, green_factor, blue_factor) {
    final_red = red_factor * sin(time_elapsed * 0.001) * 0.5 + 0.5
    final_green = green_factor * cos(time_elapsed * 0.001) * 0.5 + 0.5
    final_blue = blue_factor * sin(time_elapsed * 0.001 + 1.0) * 0.5 + 0.5
    
    set_color(final_red, final_green, final_blue)
    
    # Also apply scale effect
    scale_factor = 1.0 + sin(time_elapsed * 0.002) * 0.2
    set_scale(scale_factor, scale_factor, scale_factor)
  }
  
  # Custom function for logging detailed information
  log_detailed_info(message, include_position, include_rotation) {
    log("=== " + message + " ===")
    log("Time elapsed: " + time_elapsed)
    log("Function calls: " + function_counter)
    
    if (include_position) {
      pos = get_position()
      log("Position: " + pos[0] + ", " + pos[1] + ", " + pos[2])
    }
    
    if (include_rotation) {
      rot = get_rotation()
      log("Rotation: " + rot[0] + ", " + rot[1] + ", " + rot[2])
    }
  }
  
  start {
    log("Function Test Demo initialized")
    add_tag("function_test")
    
    log_detailed_info("Initialization Complete", true, true)
  }
  
  update(dt) {
    time_elapsed = time_elapsed + dt
    
    if (enable_functions && time_elapsed - last_function_call > function_delay) {
      function_counter = function_counter + 1
      last_function_call = time_elapsed
      
      # Test wave position function
      wave_pos = calculate_wave_position(time_elapsed * 0.001, 2.0, 1.0)
      set_position(wave_pos[0], wave_pos[1], wave_pos[2])
      
      # Test visual effects function
      red_intensity = sin(function_counter * 0.5) * 0.5 + 0.5
      green_intensity = cos(function_counter * 0.7) * 0.5 + 0.5
      blue_intensity = sin(function_counter * 1.1) * 0.5 + 0.5
      
      apply_visual_effects(red_intensity, green_intensity, blue_intensity)
      
      # Test logging function
      log_detailed_info("Function Test Update", false, false)
    }
    
    # Test input handling with functions
    if (is_key_pressed("space")) {
      log_detailed_info("Space Key Pressed", true, true)
      
      # Reset to center using wave function with 0 time
      center_pos = calculate_wave_position(0.0, 0.0, 1.0)
      set_position(center_pos[0], center_pos[1], center_pos[2])
    }
    
    if (is_key_pressed("r")) {
      # Reset everything and test functions
      function_counter = 0
      time_elapsed = 0.0
      last_function_call = 0.0
      
      apply_visual_effects(1.0, 1.0, 1.0)
      log_detailed_info("Reset Complete", true, true)
    }
  }
  
  destroy {
    log_detailed_info("Function Test Demo destroyed", false, false)
    log("Total function calls made: " + function_counter)
  }
}