mesh SkeletonAnimationDemo {
  props Animation_Control {
    animation_name: select {
      default: "idle",
      options: ["idle", "walk", "run", "jump", "dance", "wave"],
      description: "Animation to play"
    }
    
    animation_speed: range {
      default: 1.0,
      min: 0.1,
      max: 3.0,
      description: "Animation playback speed"
    }
    
    loop_animation: boolean {
      default: true,
      description: "Loop the animation"
    }
    
    blend_time: range {
      default: 0.5,
      min: 0.1,
      max: 2.0,
      description: "Animation blend time"
    }
  }
  
  props Debug_Info {
    show_bone_info: boolean {
      default: false,
      description: "Log bone information"
    }
    
    show_animation_info: boolean {
      default: false,
      description: "Log animation details"
    }
  }
  
  # Animation state
  current_animation = "none"
  last_animation_change = 0.0
  time_elapsed = 0.0
  
  # Function to change animation with blending
  change_animation(new_animation) {
    if (current_animation == new_animation) {
      return
    }
    
    log("Changing animation: " + current_animation + " -> " + new_animation)
    
    if (has_skeleton()) {
      # Use animation blending for smooth transitions
      switch (new_animation) {
        case "idle":
          blend_to_animation(idle_animation, blend_time)
          break
        case "walk":
          blend_to_animation(walk_animation, blend_time)
          break  
        case "run":
          blend_to_animation(run_animation, blend_time)
          break
        case "jump":
          play_jump_animation()  # Immediate for responsive jumping
          break
        case "dance":
          play_custom_animation("dance")
          break
        case "wave":
          play_custom_animation("wave") 
          break
      }
      
      set_animation_speed(animation_speed)
      current_animation = new_animation
      last_animation_change = time_elapsed
      
    } else {
      log("No skeleton found - animation change ignored")
    }
  }
  
  # Function to log skeleton information
  log_skeleton_info() {
    if (!has_skeleton()) {
      log("No skeleton attached to this mesh")
      return
    }
    
    bone_count = get_bone_count()
    log("=== SKELETON INFO ===")
    log("Bone count: " + bone_count)
    log("Current animation: " + current_animation)
    
    if (is_animation_playing()) {
      animation_time = get_animation_time()
      log("Animation time: " + animation_time)
      current_anim = get_current_animation()
      log("Playing: " + current_anim)
    } else {
      log("No animation currently playing")
    }
    
    log("====================")
  }
  
  start {
    log("Skeleton Animation Demo initialized")
    add_tag("skeleton_demo")
    
    # Check for skeleton and log info
    if (has_skeleton()) {
      log("Skeleton mesh detected!")
      log_skeleton_info()
      
      # Start with the configured animation
      change_animation(animation_name)
    } else {
      log("Warning: No skeleton found on this mesh")
      log("This script is designed for skeletal meshes")
    }
  }
  
  update(dt) {
    time_elapsed = time_elapsed + dt
    
    # Check if animation property changed
    if (current_animation != animation_name) {
      change_animation(animation_name)
    }
    
    # Update animation speed if changed
    if (has_skeleton() && is_animation_playing()) {
      set_animation_speed(animation_speed)
    }
    
    # Keyboard controls for testing
    if (is_key_pressed("1")) {
      change_animation("idle")
    }
    
    if (is_key_pressed("2")) {
      change_animation("walk")
    }
    
    if (is_key_pressed("3")) {
      change_animation("run")
    }
    
    if (is_key_pressed("4")) {
      change_animation("jump")
    }
    
    if (is_key_pressed("space")) {
      if (has_skeleton()) {
        if (is_animation_playing()) {
          stop_animation()
          log("Animation stopped")
        } else {
          change_animation("idle")
          log("Animation resumed")
        }
      }
    }
    
    # Debug logging
    if (show_bone_info && time_elapsed - last_animation_change > 2000.0) {
      log_skeleton_info()
      last_animation_change = time_elapsed
    }
    
    if (show_animation_info && is_animation_playing()) {
      animation_progress = get_animation_progress()
      log("Animation progress: " + animation_progress)
    }
  }
  
  destroy {
    log("Skeleton Animation Demo destroyed")
    
    if (has_skeleton()) {
      stop_animation()
    }
    
    remove_tag("skeleton_demo")
  }
}