script SkeletonGamepadController {
  props Movement {
    enabled: boolean {
      default: true,
      description: "Enable gamepad control"
    }
    
    move_speed: range {
      default: 5.0,
      min: 0.1,
      max: 20.0,
      description: "Walking/running speed"
    }
    
    rotation_speed: range {
      default: 2.0,
      min: 0.1,
      max: 10.0,
      description: "Rotation speed"
    }
    
    gamepad_index: range {
      default: 0.0,
      min: 0.0,
      max: 3.0,
      description: "Gamepad index (0-3)"
    }
  }
  
  props Animation {
    # Movement animations
    idle_animation: select {
      default: "none",
      options: ["none"],
      description: "Animation when not moving"
    }
    
    walk_animation: select {
      default: "none",
      options: ["none"],
      description: "Animation for left stick movement"
    }
    
    run_animation: select {
      default: "none",
      options: ["none"],
      description: "Animation for left stick + run button"
    }
    
    # Button animation triggers (once per press)
    trigger_button_a: boolean {
      default: false,
      once: true,
      description: "Trigger A/Cross button animation"
    }
    
    trigger_button_b: boolean {
      default: false,
      once: true,
      description: "Trigger B/Circle button animation"
    }
    
    trigger_button_x: boolean {
      default: false,
      once: true,
      description: "Trigger X/Square button animation"
    }
    
    trigger_button_y: boolean {
      default: false,
      once: true,
      description: "Trigger Y/Triangle button animation"
    }
    
    trigger_left_bumper: boolean {
      default: false,
      once: true,
      description: "Trigger Left bumper animation"
    }
    
    trigger_right_bumper: boolean {
      default: false,
      once: true,
      description: "Trigger Right bumper animation"
    }
    
    # Combination button triggers
    trigger_combo_xa: boolean {
      default: false,
      once: true,
      description: "Trigger X+A combo animation"
    }
    
    trigger_combo_lb_rb: boolean {
      default: false,
      once: true,
      description: "Trigger LB+RB combo animation"
    }
    
    trigger_combo_ab: boolean {
      default: false,
      once: true,
      description: "Trigger A+B combo animation"
    }
    
    # D-pad triggers
    trigger_dpad_up: boolean {
      default: false,
      once: true,
      description: "Trigger D-pad Up animation"
    }
    
    trigger_dpad_down: boolean {
      default: false,
      once: true,
      description: "Trigger D-pad Down animation"
    }
    
    trigger_dpad_left: boolean {
      default: false,
      once: true,
      description: "Trigger D-pad Left animation"
    }
    
    trigger_dpad_right: boolean {
      default: false,
      once: true,
      description: "Trigger D-pad Right animation"
    }
    
    # Button animations
    button_a_animation: select {
      default: "none",
      options: ["none"],
      description: "A/Cross button animation"
    }
    
    button_b_animation: select {
      default: "none",
      options: ["none"],
      description: "B/Circle button animation"
    }
    
    button_x_animation: select {
      default: "none",
      options: ["none"],
      description: "X/Square button animation"
    }
    
    button_y_animation: select {
      default: "none",
      options: ["none"],
      description: "Y/Triangle button animation"
    }
    
    # Shoulder buttons
    left_bumper_animation: select {
      default: "none",
      options: ["none"],
      description: "Left bumper (LB/L1) animation"
    }
    
    right_bumper_animation: select {
      default: "none",
      options: ["none"],
      description: "Right bumper (RB/R1) animation"
    }
    
    # Combination animations
    combo_xa_animation: select {
      default: "none",
      options: ["none"],
      description: "X+A combo animation"
    }
    
    combo_lb_rb_animation: select {
      default: "none",
      options: ["none"],
      description: "LB+RB combo animation"
    }
    
    combo_ab_animation: select {
      default: "none",
      options: ["none"],
      description: "A+B combo animation"
    }
    
    # D-pad animations
    dpad_up_animation: select {
      default: "none",
      options: ["none"],
      description: "D-pad Up animation"
    }
    
    dpad_down_animation: select {
      default: "none",
      options: ["none"],
      description: "D-pad Down animation"
    }
    
    dpad_left_animation: select {
      default: "none",
      options: ["none"],
      description: "D-pad Left animation"
    }
    
    dpad_right_animation: select {
      default: "none",
      options: ["none"],
      description: "D-pad Right animation"
    }
    
    # Animation settings
    animation_speed: range {
      default: 1.0,
      min: 0.1,
      max: 3.0,
      description: "Animation playback speed"
    }
    
    blend_time: range {
      default: 0.3,
      min: 0.1,
      max: 2.0,
      description: "Animation blend/transition time"
    }
  }
  
  props Camera {
    camera_follow: boolean {
      default: true,
      description: "Enable camera following"
    }
    
    camera_distance: range {
      default: 8.0,
      min: 2.0,
      max: 20.0,
      description: "Camera distance behind character"
    }
    
    camera_height: range {
      default: 3.0,
      min: 0.5,
      max: 10.0,
      description: "Camera height above character"
    }
    
    camera_sensitivity: range {
      default: 2.0,
      min: 0.5,
      max: 5.0,
      description: "Camera rotation sensitivity"
    }
  }
  
  # Movement state
  pos_x = 0.0
  pos_y = 0.0
  pos_z = 0.0
  rot_y = 0.0
  velocity_y = 0.0
  
  # Animation state
  current_animation = "idle"
  is_moving = false
  is_running = false
  is_jumping = false
  ground_level = 0.0
  available_animations = []
  anim_list = []
  
  # Camera state
  camera_rot_x = 0.0
  camera_rot_y = 0.0
  
  # Helper function to determine movement state
  get_movement_state(left_x, left_y, run_button_pressed) {
    stick_magnitude = sqrt(left_x * left_x + left_y * left_y)
    
    if (stick_magnitude < 0.1) {
      return "idle"
    }
    
    if (run_button_pressed && stick_magnitude > 0.5) {
      return "run"
    }
    
    return "walk"
  }
  
  
  # Function to handle smooth movement with physics
  apply_movement(move_x, move_z, dt, is_running_state) {
    # Apply movement relative to camera view direction
    cos_rot = cos(camera_rot_y)
    sin_rot = sin(camera_rot_y)
    
    # Transform movement to world space (relative to camera direction)
    world_move_x = move_x * cos_rot - move_z * sin_rot
    world_move_z = move_x * sin_rot + move_z * cos_rot
    
    # Apply speed multiplier for running
    speed_multiplier = 1.0
    if (is_running_state) {
      speed_multiplier = 2.0
    }
    
    pos_x = pos_x + world_move_x * speed_multiplier * dt
    pos_z = pos_z + world_move_z * speed_multiplier * dt
    
    # Rotate character to face movement direction if moving
    if (move_x != 0.0 || move_z != 0.0) {
      rot_y = atan2(world_move_x, world_move_z)
    }
  }
  
  # Function to handle jumping with gravity
  handle_jumping(jump_pressed, dt) {
    gravity = -20.0
    jump_force = 15.0
    
    # Apply gravity
    velocity_y = velocity_y + gravity * dt
    pos_y = pos_y + velocity_y * dt
    
    # Ground collision
    if (pos_y <= ground_level) {
      pos_y = ground_level
      
      # Jump if button pressed and on ground
      if (jump_pressed && velocity_y <= 0.0) {
        velocity_y = jump_force
        is_jumping = true
        
        # Trigger jump animation
        if (has_skeleton()) {
          play_jump_animation()
        }
        
        log("Character jumped!")
      } else if (velocity_y <= 0.0) {
        velocity_y = 0.0
        is_jumping = false
      }
    }
  }
  
  # Function to update camera to follow character
  update_camera(dt) {
    # Update camera pitch with right stick Y
    camera_rot_x = camera_rot_x + right_y * camera_sensitivity * dt
    camera_rot_x = clamp(camera_rot_x, -1.4, 0.5)  # Clamp vertical rotation
    
    # Position camera orbiting around character
    cos_rot = cos(camera_rot_y)
    sin_rot = sin(camera_rot_y)
    cos_pitch = cos(camera_rot_x)
    
    # Camera position: orbiting around character
    cam_x = pos_x - sin_rot * camera_distance * cos_pitch
    cam_y = pos_y + camera_height + camera_distance * sin(-camera_rot_x)
    cam_z = pos_z - cos_rot * camera_distance * cos_pitch
    
    set_camera_position(cam_x, cam_y, cam_z)
    set_camera_target(pos_x, pos_y + camera_height * 0.5, pos_z)
  }
  
  start {
    log("=== SKELETON GAMEPAD CONTROLLER ===")
    log("Controls:")
    log("  Left Stick: Movement animations")  
    log("  Right Stick: Camera (Look Around)")
    log("  A/Cross: Mapped animation")
    log("  B/Circle: Mapped animation")
    log("  X/Square: Mapped animation")
    log("  Y/Triangle: Mapped animation")
    log("  LB/L1 & RB/R1: Mapped animations")
    log("  D-pad: Mapped animations")
    log("  Configure animations in properties!")
    log("=====================================")
    
    add_tag("skeleton_character")
    
    # Initialize position
    initial_pos = get_position()
    pos_x = initial_pos[0]
    pos_y = initial_pos[1] 
    pos_z = initial_pos[2]
    ground_level = pos_y
    
    current_animation = "idle"
    
    # Initialize camera rotation to match character
    camera_rot_y = rot_y
    
    # Setup animation list immediately
    if (has_skeleton()) {
      log("🔍 Detecting animations for gamepad mapping...")
      
      # Get actual animations from the skeleton
      available_animations = get_animation_ranges()
      log("📊 Found " + String(available_animations.length) + " animations")
      
      # Populate animation list with detected animations
      anim_list.push("none")  # Always add "none" option
      
      if (available_animations.length > 0) {
        for (i = 0; i < available_animations.length; i++) {
          anim_list.push(available_animations[i])
          log("  🎭 " + String(i + 1) + ": " + available_animations[i])
        }
      } else {
        # If no animations detected, add common defaults
        log("⚠️ No animations detected, using defaults")
        anim_list.push("idle")
        anim_list.push("walk") 
        anim_list.push("run")
        anim_list.push("jump")
        anim_list.push("attack")
        anim_list.push("death")
        anim_list.push("dance")
        anim_list.push("wave")
      }
      
      log("📊 Populating " + String(anim_list.length) + " options in dropdowns...")
      
      # Update all animation property dropdowns
      update_property_options("idle_animation", anim_list)
      update_property_options("walk_animation", anim_list)
      update_property_options("run_animation", anim_list)
      update_property_options("button_a_animation", anim_list)
      update_property_options("button_b_animation", anim_list)
      update_property_options("button_x_animation", anim_list)
      update_property_options("button_y_animation", anim_list)
      update_property_options("left_bumper_animation", anim_list)
      update_property_options("right_bumper_animation", anim_list)
      update_property_options("combo_xa_animation", anim_list)
      update_property_options("combo_lb_rb_animation", anim_list)
      update_property_options("combo_ab_animation", anim_list)
      update_property_options("dpad_up_animation", anim_list)
      update_property_options("dpad_down_animation", anim_list)
      update_property_options("dpad_left_animation", anim_list)
      update_property_options("dpad_right_animation", anim_list)
      
      log("🎉 All gamepad animation mappings ready!")
    }
  }
  
  # Handle one-shot button animations
  once {
    # Single button animations
    if (trigger_button_a && button_a_animation != "none") {
      log("🎮 Triggering A button animation: " + button_a_animation)
      animation_play_animation_by_name(button_a_animation)
    }
    
    if (trigger_button_b && button_b_animation != "none") {
      log("🎮 Triggering B button animation: " + button_b_animation)
      animation_play_animation_by_name(button_b_animation)
    }
    
    if (trigger_button_x && button_x_animation != "none") {
      log("🎮 Triggering X button animation: " + button_x_animation)
      animation_play_animation_by_name(button_x_animation)
    }
    
    if (trigger_button_y && button_y_animation != "none") {
      log("🎮 Triggering Y button animation: " + button_y_animation)
      animation_play_animation_by_name(button_y_animation)
    }
    
    if (trigger_left_bumper && left_bumper_animation != "none") {
      log("🎮 Triggering LB animation: " + left_bumper_animation)
      animation_play_animation_by_name(left_bumper_animation)
    }
    
    if (trigger_right_bumper && right_bumper_animation != "none") {
      log("🎮 Triggering RB animation: " + right_bumper_animation)
      animation_play_animation_by_name(right_bumper_animation)
    }
    
    # Combination button animations
    if (trigger_combo_xa && combo_xa_animation != "none") {
      log("🎮 Triggering X+A combo animation: " + combo_xa_animation)
      animation_play_animation_by_name(combo_xa_animation)
    }
    
    if (trigger_combo_lb_rb && combo_lb_rb_animation != "none") {
      log("🎮 Triggering LB+RB combo animation: " + combo_lb_rb_animation)
      animation_play_animation_by_name(combo_lb_rb_animation)
    }
    
    if (trigger_combo_ab && combo_ab_animation != "none") {
      log("🎮 Triggering A+B combo animation: " + combo_ab_animation)
      animation_play_animation_by_name(combo_ab_animation)
    }
    
    # D-pad animations
    if (trigger_dpad_up && dpad_up_animation != "none") {
      log("🎮 Triggering D-pad Up animation: " + dpad_up_animation)
      animation_play_animation_by_name(dpad_up_animation)
    }
    
    if (trigger_dpad_down && dpad_down_animation != "none") {
      log("🎮 Triggering D-pad Down animation: " + dpad_down_animation)
      animation_play_animation_by_name(dpad_down_animation)
    }
    
    if (trigger_dpad_left && dpad_left_animation != "none") {
      log("🎮 Triggering D-pad Left animation: " + dpad_left_animation)
      animation_play_animation_by_name(dpad_left_animation)
    }
    
    if (trigger_dpad_right && dpad_right_animation != "none") {
      log("🎮 Triggering D-pad Right animation: " + dpad_right_animation)
      animation_play_animation_by_name(dpad_right_animation)
    }
  }
  
  update(dt) {
    if (!enabled) {
      return
    }
    
    gamepad_idx = floor(gamepad_index)
    
    # Get gamepad input
    left_x = get_left_stick_x(gamepad_idx)
    left_y = get_left_stick_y(gamepad_idx) * -1.0  # Invert for forward/back
    right_x = get_right_stick_x(gamepad_idx)
    right_y = get_right_stick_y(gamepad_idx) * -1.0  # Camera pitch
    
    # Button inputs
    button_a = is_gamepad_button_pressed(0, gamepad_idx)   # A/Cross
    button_b = is_gamepad_button_pressed(1, gamepad_idx)   # B/Circle
    button_x = is_gamepad_button_pressed(2, gamepad_idx)   # X/Square
    button_y = is_gamepad_button_pressed(3, gamepad_idx)   # Y/Triangle
    left_bumper = is_gamepad_button_pressed(4, gamepad_idx)  # LB/L1
    right_bumper = is_gamepad_button_pressed(5, gamepad_idx) # RB/R1
    dpad_up = is_gamepad_button_pressed(12, gamepad_idx)   # D-pad Up
    dpad_down = is_gamepad_button_pressed(13, gamepad_idx) # D-pad Down
    dpad_left = is_gamepad_button_pressed(14, gamepad_idx) # D-pad Left
    dpad_right = is_gamepad_button_pressed(15, gamepad_idx) # D-pad Right
    
    # Handle button animations (these take priority)
    animation_played = false
    
    # Check for combination buttons first (higher priority)
    if (button_x && button_a && combo_xa_animation != "none") {
      trigger_combo_xa = true
      animation_played = true
    } else if (left_bumper && right_bumper && combo_lb_rb_animation != "none") {
      trigger_combo_lb_rb = true
      animation_played = true
    } else if (button_a && button_b && combo_ab_animation != "none") {
      trigger_combo_ab = true
      animation_played = true
    }
    # Single button triggers (only if no combo)
    else if (button_a && button_a_animation != "none") {
      trigger_button_a = true
      animation_played = true
    } else if (button_b && button_b_animation != "none") {
      trigger_button_b = true
      animation_played = true
    } else if (button_x && button_x_animation != "none") {
      trigger_button_x = true
      animation_played = true
    } else if (button_y && button_y_animation != "none") {
      trigger_button_y = true
      animation_played = true
    } else if (left_bumper && left_bumper_animation != "none") {
      trigger_left_bumper = true
      animation_played = true
    } else if (right_bumper && right_bumper_animation != "none") {
      trigger_right_bumper = true
      animation_played = true
    } else if (dpad_up && dpad_up_animation != "none") {
      trigger_dpad_up = true
      animation_played = true
    } else if (dpad_down && dpad_down_animation != "none") {
      trigger_dpad_down = true
      animation_played = true
    } else if (dpad_left && dpad_left_animation != "none") {
      trigger_dpad_left = true
      animation_played = true
    } else if (dpad_right && dpad_right_animation != "none") {
      trigger_dpad_right = true
      animation_played = true
    }
    
    # Handle movement animations (only on state changes, not button animations)
    if (!animation_played) {
      stick_magnitude = sqrt(left_x * left_x + left_y * left_y)
      new_movement_state = get_movement_state(left_x, left_y, button_x)
      
      # Only change animation if movement state changed
      if (new_movement_state != current_animation) {
        current_animation = new_movement_state
        
        if (current_animation == "idle" && idle_animation != "none") {
          animation_play_animation_by_name(idle_animation)
          set_animation_speed(animation_speed)
        } else if (current_animation == "run" && run_animation != "none") {
          animation_play_animation_by_name(run_animation)
          set_animation_speed(animation_speed * 1.5)
        } else if (current_animation == "walk" && walk_animation != "none") {
          animation_play_animation_by_name(walk_animation)
          set_animation_speed(animation_speed)
        }
      }
    }
    
    # Calculate movement
    move_x = left_x * move_speed
    move_z = left_y * move_speed
    
    # Apply movement
    apply_movement(move_x, move_z, dt, button_x)
    
    # Handle jumping physics (A button)
    handle_jumping(button_a, dt)
    
    # Update camera rotation with right stick
    camera_rot_y = camera_rot_y + right_x * camera_sensitivity * dt
    
    # Reset button (Y button)
    if (button_y && button_y_animation == "none") {
      pos_x = 0.0
      pos_y = ground_level
      pos_z = 0.0
      rot_y = 0.0
      velocity_y = 0.0
      
      log("Character reset to origin")
    }
    
    # Apply all transforms
    set_position(pos_x, pos_y, pos_z)
    set_rotation(0.0, rot_y, 0.0)
    
    # Update camera to follow character
    if (camera_follow) {
      update_camera(dt)
    }
  }
  
  destroy {
    log("Skeleton gamepad controller destroyed")
    
    # Stop all animations
    if (has_skeleton()) {
      stop_animation()
    }
    
    remove_tag("skeleton_character")
  }
}