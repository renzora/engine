script CompleteFeatureDemo {
  props Demo_Settings {
    animation_speed: range {
      default: 1.0,
      min: 0.1,
      max: 5.0,
      description: "Animation speed multiplier"
    }
    
    demo_mode: select {
      default: "functions",
      options: ["functions", "arrays", "objects", "control"],
      description: "Demo mode to showcase"
    }
  }
  
  # State variables
  time_elapsed = 0.0
  demo_data = []
  object_store = {}
  function_counter = 0
  
  # === CUSTOM FUNCTIONS ===
  
  # Mathematical utility function
  calculate_wave(time, amplitude, frequency, phase) {
    result = amplitude * sin(time * frequency + phase)
    return result
  }
  
  # Array manipulation function  
  create_demo_array(size, multiplier) {
    temp_array = []
    
    for (i = 0; i < size; i = i + 1) {
      value = i * multiplier + calculate_wave(time_elapsed, 1.0, 0.1, i)
      temp_array = temp_array  # This would be: temp_array.push(value) but we don't support complex assignment yet
    }
    
    return temp_array
  }
  
  # Object creation function
  create_demo_object(id, name, active) {
    demo_obj = {
      id: id,
      name: name,
      active: active,
      created_time: time_elapsed
    }
    
    return demo_obj
  }
  
  # Control flow demonstration
  process_demo_mode(mode) {
    log("Processing demo mode: " + mode)
    
    switch (mode) {
      case "functions":
        log("Demonstrating custom functions")
        result = calculate_wave(time_elapsed, 2.0, 1.0, 0.0)
        set_position(result, 0, 0)
        break
        
      case "arrays":
        log("Demonstrating array operations")  
        test_array = create_demo_array(5, 2.0)
        log("Created array")
        break
        
      case "objects":
        log("Demonstrating object operations")
        test_obj = create_demo_object(function_counter, "TestObject", true)
        log("Created object with id: " + test_obj.id)
        break
        
      case "control":
        log("Demonstrating control structures")
        
        for (j = 0; j < 3; j = j + 1) {
          wave_val = calculate_wave(time_elapsed + j, 1.0, 2.0, 0.0)
          
          if (wave_val > 0.5) {
            set_color(1.0, wave_val, 0.0)
          } else {
            set_color(0.0, 0.5, wave_val + 0.5)
          }
        }
        break
    }
    
    function_counter = function_counter + 1
  }
  
  # Utility logging function
  log_demo_status(message) {
    log("=== DEMO STATUS ===")
    log("Message: " + message)
    log("Time: " + time_elapsed)
    log("Function calls: " + function_counter)
    log("Current mode: " + demo_mode)
    log("================")
  }
  
  start {
    log("Complete Feature Demo initialized")
    add_tag("feature_demo")
    
    # Initialize demo data
    demo_data = create_demo_array(10, 1.5)
    object_store = create_demo_object(1, "InitialObject", true)
    
    log_demo_status("Initialization complete")
  }
  
  update(dt) {
    time_elapsed = time_elapsed + dt
    
    # Process current demo mode every 2 seconds
    if (time_elapsed > function_counter * 2000.0) {
      process_demo_mode(demo_mode)
      log_demo_status("Demo mode processed")
    }
    
    # Interactive controls
    if (is_key_pressed("1")) {
      wave_x = calculate_wave(time_elapsed, 3.0, 1.0, 0.0)
      wave_y = calculate_wave(time_elapsed, 2.0, 1.5, 1.57) 
      wave_z = calculate_wave(time_elapsed, 1.0, 2.0, 3.14)
      set_position(wave_x, wave_y, wave_z)
      log("Applied wave motion")
    }
    
    if (is_key_pressed("2")) {
      new_obj = create_demo_object(function_counter + 100, "InteractiveObject", true)
      log("Created interactive object: " + new_obj.name)
    }
    
    if (is_key_pressed("3")) {
      test_array = create_demo_array(3, 5.0)
      log("Created test array")
    }
    
    if (is_key_pressed("space")) {
      # Cycle through demo modes
      switch (demo_mode) {
        case "functions":
          # Would switch to "arrays" but we can't modify props at runtime  
          log("Current mode: functions")
          break
        case "arrays":
          log("Current mode: arrays")
          break
        case "objects":
          log("Current mode: objects") 
          break
        case "control":
          log("Current mode: control")
          break
      }
    }
    
    # Reset demo
    if (is_key_pressed("r")) {
      function_counter = 0
      time_elapsed = 0.0
      set_position(0, 0, 0)
      set_color(1.0, 1.0, 1.0)
      log_demo_status("Demo reset")
    }
  }
  
  destroy {
    log_demo_status("Demo destroyed")
    log("Total function calls: " + function_counter)
  }
}