pub fn get_api_method_mappings() -> Vec<(String, String)> {
    vec![
        // === CORE FUNCTIONS ===
        ("log".to_string(), "log".to_string()),
        ("time".to_string(), "time".to_string()),
        ("addTag".to_string(), "addTag".to_string()),
        ("removeTag".to_string(), "removeTag".to_string()),
        ("hasTag".to_string(), "hasTag".to_string()),
        ("getTags".to_string(), "getTags".to_string()),

        // === TRANSFORM FUNCTIONS ===
        ("position".to_string(), "getPosition".to_string()),
        ("setPosition".to_string(), "setPosition".to_string()),
        ("rotation".to_string(), "getRotation".to_string()),
        ("setRotation".to_string(), "setRotation".to_string()),
        ("getScale".to_string(), "getScale".to_string()),
        ("scale".to_string(), "getScale".to_string()),
        ("setScale".to_string(), "setScale".to_string()),
        ("move".to_string(), "moveBy".to_string()),
        ("rotate".to_string(), "rotateBy".to_string()),

        // === COLOR & MATERIAL FUNCTIONS ===
        ("color".to_string(), "setColor".to_string()),
        ("setColor".to_string(), "setColor".to_string()),
        ("setAlpha".to_string(), "setAlpha".to_string()),
        ("diffuseColor".to_string(), "setDiffuseColor".to_string()),
        ("specularColor".to_string(), "setSpecularColor".to_string()),
        ("emissiveColor".to_string(), "setEmissiveColor".to_string()),
        ("ambientColor".to_string(), "setAmbientColor".to_string()),
        ("specularPower".to_string(), "setSpecularPower".to_string()),
        ("materialProperty".to_string(), "setMaterialProperty".to_string()),

        // === INPUT FUNCTIONS ===
        ("isKeyPressed".to_string(), "isKeyPressed".to_string()),
        ("isCtrlPressed".to_string(), "isCtrlPressed".to_string()),
        ("isShiftPressed".to_string(), "isShiftPressed".to_string()),
        ("isKeyComboPressed".to_string(), "isKeyComboPressed".to_string()),
        ("getPressedKeys".to_string(), "getPressedKeys".to_string()),
        ("mousePosition".to_string(), "getMousePosition".to_string()),
        ("mouseX".to_string(), "getMouseX".to_string()),
        ("mouseY".to_string(), "getMouseY".to_string()),
        ("isLeftMouse".to_string(), "isLeftMouseButtonPressed".to_string()),
        ("isRightMouse".to_string(), "isRightMouseButtonPressed".to_string()),
        ("isMiddleMouse".to_string(), "isMiddleMouseButtonPressed".to_string()),
        ("pick".to_string(), "pickObject".to_string()),
        ("pickObjects".to_string(), "pickObjects".to_string()),
        ("pointerLock".to_string(), "requestPointerLock".to_string()),
        ("exitPointerLock".to_string(), "exitPointerLock".to_string()),

        // === GAMEPAD FUNCTIONS ===
        ("isGamepadConnected".to_string(), "isGamepadConnected".to_string()),
        ("getGamepad".to_string(), "getGamepad".to_string()),
        ("leftX".to_string(), "getLeftStickX".to_string()),
        ("leftY".to_string(), "getLeftStickY".to_string()),
        ("rightX".to_string(), "getRightStickX".to_string()),
        ("rightY".to_string(), "getRightStickY".to_string()),
        ("button".to_string(), "isGamepadButtonPressed".to_string()),
        ("leftTrigger".to_string(), "getLeftTrigger".to_string()),
        ("rightTrigger".to_string(), "getRightTrigger".to_string()),
        ("getGamepadTrigger".to_string(), "getGamepadTrigger".to_string()),
        ("isButtonA".to_string(), "isGamepadButtonA".to_string()),
        ("isButtonB".to_string(), "isGamepadButtonB".to_string()),
        ("isButtonX".to_string(), "isGamepadButtonX".to_string()),
        ("isButtonY".to_string(), "isGamepadButtonY".to_string()),
        ("leftStickDeadzone".to_string(), "getLeftStickWithDeadzone".to_string()),
        ("rightStickDeadzone".to_string(), "getRightStickWithDeadzone".to_string()),
        ("vibrate".to_string(), "vibrateGamepad".to_string()),

        // === PHYSICS FUNCTIONS ===
        ("physics".to_string(), "enablePhysics".to_string()),
        ("physicsAggregate".to_string(), "setPhysicsImpostor".to_string()),
        ("updatePhysics".to_string(), "updatePhysics".to_string()),
        ("removePhysicsAggregate".to_string(), "removePhysicsImpostor".to_string()),
        ("impulse".to_string(), "applyImpulse".to_string()),
        ("force".to_string(), "applyForce".to_string()),
        ("linearVelocity".to_string(), "setLinearVelocity".to_string()),
        ("getLinearVelocity".to_string(), "getLinearVelocity".to_string()),
        ("angularVelocity".to_string(), "setAngularVelocity".to_string()),

        // === CAMERA FUNCTIONS ===
        ("cameraPosition".to_string(), "setCameraPosition".to_string()),
        ("cameraTarget".to_string(), "setCameraTarget".to_string()),
        ("cameraRadius".to_string(), "setCameraRadius".to_string()),
        ("orbitCamera".to_string(), "orbitCamera".to_string()),
        ("isInCameraView".to_string(), "isInCameraView".to_string()),

        // === SCENE QUERY FUNCTIONS ===
        ("findByName".to_string(), "findObjectByName".to_string()),
        ("findByTag".to_string(), "findObjectsByTag".to_string()),
        ("getAllMeshes".to_string(), "getAllMeshes".to_string()),
        ("getAllLights".to_string(), "getAllLights".to_string()),
        ("getAllCameras".to_string(), "getAllCameras".to_string()),
        ("getInRadius".to_string(), "getObjectsInRadius".to_string()),
        ("getInBox".to_string(), "getObjectsInBox".to_string()),
        ("getClosest".to_string(), "getClosestObject".to_string()),
        ("raycast".to_string(), "raycast".to_string()),
        ("multiRaycast".to_string(), "multiRaycast".to_string()),
        ("intersectsMesh".to_string(), "intersectsMesh".to_string()),
        ("intersectsPoint".to_string(), "intersectsPoint".to_string()),
        ("getBoundingInfo".to_string(), "getBoundingInfo".to_string()),
        ("boundingBoxGizmo".to_string(), "boundingBoxGizmo".to_string()),

        // === ANIMATION FUNCTIONS ===
        ("animate".to_string(), "animate".to_string()),
        ("animatePosition".to_string(), "animatePosition".to_string()),
        ("animateRotation".to_string(), "animateRotation".to_string()),
        ("animateColor".to_string(), "animateColor".to_string()),
        ("animateAlpha".to_string(), "animateAlpha".to_string()),
        ("animateTo".to_string(), "animateTo".to_string()),
        ("stopAnimation".to_string(), "stopAnimation".to_string()),
        ("animationGroup".to_string(), "createAnimationGroup".to_string()),
        ("playAnimationGroup".to_string(), "playAnimationGroup".to_string()),
        ("stopAnimationGroup".to_string(), "stopAnimationGroup".to_string()),
        ("keyframeAnimation".to_string(), "createKeyframeAnimation".to_string()),
        ("blendAnimations".to_string(), "blendAnimations".to_string()),
        ("onAnimationComplete".to_string(), "onAnimationComplete".to_string()),
        ("isAnimating".to_string(), "isAnimating".to_string()),
        ("getAnimationProgress".to_string(), "getAnimationProgress".to_string()),
        ("playAnimationByName".to_string(), "playAnimationByName".to_string()),
        ("animationSpeed".to_string(), "setAnimationSpeed".to_string()),
        ("isAnimationPlaying".to_string(), "isAnimationPlaying".to_string()),
        ("getCurrentAnimation".to_string(), "getCurrentAnimation".to_string()),
        ("hasSkeleton".to_string(), "hasSkeleton".to_string()),
        ("getBoneCount".to_string(), "getBoneCount".to_string()),

        // === UTILITY FUNCTIONS ===
        ("random".to_string(), "random".to_string()),
        ("randomRange".to_string(), "randomRange".to_string()),
        ("clamp".to_string(), "clamp".to_string()),
        ("lerp".to_string(), "lerp".to_string()),
        ("distance".to_string(), "distance".to_string()),
        ("normalize".to_string(), "normalize".to_string()),
        ("sin".to_string(), "sin".to_string()),
        ("cos".to_string(), "cos".to_string()),
        ("sqrt".to_string(), "sqrt".to_string()),
        ("abs".to_string(), "abs".to_string()),
        ("floor".to_string(), "floor".to_string()),
        ("atan2".to_string(), "atan2".to_string()),

        // === MATERIAL CREATION ===
        ("waterMaterial".to_string(), "createWaterMaterial".to_string()),
        ("standardMaterial".to_string(), "createStandardMaterial".to_string()),

        // === OBJECT MANAGEMENT ===
        ("dispose".to_string(), "disposeObject".to_string()),
        ("clone".to_string(), "cloneObject".to_string()),
        ("getMetadata".to_string(), "getMetadata".to_string()),
        ("setMetadata".to_string(), "setMetadata".to_string()),
        ("hasMetadata".to_string(), "hasMetadata".to_string()),

        // === EVENT HANDLERS ===
        ("onKeyDown".to_string(), "onKeyDown".to_string()),
        ("onKeyUp".to_string(), "onKeyUp".to_string()),
        ("onMouseDown".to_string(), "onMouseDown".to_string()),
        ("onMouseUp".to_string(), "onMouseUp".to_string()),

        // === LIGHTING API ===
        ("createDirectionalLight".to_string(), "createDirectionalLight".to_string()),
        ("createHemisphericLight".to_string(), "createHemisphericLight".to_string()),
        ("createPointLight".to_string(), "createPointLight".to_string()),
        ("createSpotLight".to_string(), "createSpotLight".to_string()),
        ("setLightIntensity".to_string(), "setLightIntensity".to_string()),
        ("getLightIntensity".to_string(), "getLightIntensity".to_string()),
        ("lightIntensity".to_string(), "getLightIntensity".to_string()),
        ("setLightDiffuse".to_string(), "setLightDiffuse".to_string()),
        ("getLightDiffuse".to_string(), "getLightDiffuse".to_string()),
        ("lightDiffuse".to_string(), "getLightDiffuse".to_string()),
        ("setLightSpecular".to_string(), "setLightSpecular".to_string()),
        ("getLightSpecular".to_string(), "getLightSpecular".to_string()),
        ("lightSpecular".to_string(), "getLightSpecular".to_string()),
        ("setLightDirection".to_string(), "setLightDirection".to_string()),
        ("getLightDirection".to_string(), "getLightDirection".to_string()),
        ("lightDirection".to_string(), "getLightDirection".to_string()),
        ("setLightPosition".to_string(), "setLightPosition".to_string()),
        ("getLightPosition".to_string(), "getLightPosition".to_string()),
        ("lightPosition".to_string(), "getLightPosition".to_string()),
        ("enableLight".to_string(), "enableLight".to_string()),
        ("disableLight".to_string(), "disableLight".to_string()),
        ("isLightEnabled".to_string(), "isLightEnabled".to_string()),
        ("setGroundColor".to_string(), "setGroundColor".to_string()),
        ("getGroundColor".to_string(), "getGroundColor".to_string()),
        ("setLightRange".to_string(), "setLightRange".to_string()),
        ("getLightRange".to_string(), "getLightRange".to_string()),
        ("findLightByName".to_string(), "findLightByName".to_string()),
        ("getLightsByType".to_string(), "getLightsByType".to_string()),
        ("disposeLight".to_string(), "disposeLight".to_string()),
        ("cloneLight".to_string(), "cloneLight".to_string()),
        ("getLightInfo".to_string(), "getLightInfo".to_string()),
        ("lightInfo".to_string(), "getLightInfo".to_string()),
        ("createStandardLighting".to_string(), "createStandardLighting".to_string()),
        ("standardLighting".to_string(), "standardLighting".to_string()),
        ("createMoonLighting".to_string(), "createMoonLighting".to_string()),
        ("moonLighting".to_string(), "moonLighting".to_string()),
        ("directionalLight".to_string(), "directionalLight".to_string()),
        ("hemisphericLight".to_string(), "hemisphericLight".to_string()),
        ("pointLight".to_string(), "pointLight".to_string()),
        ("spotLight".to_string(), "spotLight".to_string()),

        // === ENVIRONMENT API ===
        ("createSkybox".to_string(), "createSkybox".to_string()),
        ("createSkyMaterial".to_string(), "createSkyMaterial".to_string()),
        ("applySkyboxMaterial".to_string(), "applySkyboxMaterial".to_string()),
        ("createMoon".to_string(), "createMoon".to_string()),
        ("enableFog".to_string(), "enableFog".to_string()),
        ("setFogMode".to_string(), "setFogMode".to_string()),
        ("setFogDensity".to_string(), "setFogDensity".to_string()),
        ("setFogColor".to_string(), "setFogColor".to_string()),
        ("setFogStart".to_string(), "setFogStart".to_string()),
        ("setFogEnd".to_string(), "setFogEnd".to_string()),
        ("getFogSettings".to_string(), "getFogSettings".to_string()),
        ("setClearColor".to_string(), "setClearColor".to_string()),
        ("getClearColor".to_string(), "getClearColor".to_string()),
        ("setEnvironmentIntensity".to_string(), "setEnvironmentIntensity".to_string()),
        ("getEnvironmentIntensity".to_string(), "getEnvironmentIntensity".to_string()),
        ("setSkyTurbidity".to_string(), "setSkyTurbidity".to_string()),
        ("getSkyTurbidity".to_string(), "getSkyTurbidity".to_string()),
        ("setSkyLuminance".to_string(), "setSkyLuminance".to_string()),
        ("getSkyLuminance".to_string(), "getSkyLuminance".to_string()),
        ("setSkyInclination".to_string(), "setSkyInclination".to_string()),
        ("getSkyInclination".to_string(), "getSkyInclination".to_string()),
        ("setSkyAzimuth".to_string(), "setSkyAzimuth".to_string()),
        ("getSkyAzimuth".to_string(), "getSkyAzimuth".to_string()),
        ("enableSkyClouds".to_string(), "enableSkyClouds".to_string()),
        ("setSkyCloudSize".to_string(), "setSkyCloudSize".to_string()),
        ("setSkyCloudDensity".to_string(), "setSkyCloudDensity".to_string()),
        ("getSkyCloudSettings".to_string(), "getSkyCloudSettings".to_string()),
        ("createStandardEnvironment".to_string(), "createStandardEnvironment".to_string()),
        ("setExposure".to_string(), "setExposure".to_string()),
        ("getExposure".to_string(), "getExposure".to_string()),
        ("setContrast".to_string(), "setContrast".to_string()),
        ("getContrast".to_string(), "getContrast".to_string()),
        ("enableToneMapping".to_string(), "enableToneMapping".to_string()),
        ("setToneMappingType".to_string(), "setToneMappingType".to_string()),
        ("getToneMappingSettings".to_string(), "getToneMappingSettings".to_string()),
        ("enableVignette".to_string(), "enableVignette".to_string()),
        ("setVignetteWeight".to_string(), "setVignetteWeight".to_string()),
        ("setVignetteStretch".to_string(), "setVignetteStretch".to_string()),
        ("setVignetteCameraFov".to_string(), "setVignetteCameraFov".to_string()),
        ("getVignetteSettings".to_string(), "getVignetteSettings".to_string()),
        ("enableFXAA".to_string(), "enableFXAA".to_string()),

        // === DAY/NIGHT API ===
        ("createDayNightCycle".to_string(), "createDayNightCycle".to_string()),
        ("startDayNightCycle".to_string(), "startDayNightCycle".to_string()),
        ("stopDayNightCycle".to_string(), "stopDayNightCycle".to_string()),
        ("pauseDayNightCycle".to_string(), "pauseDayNightCycle".to_string()),
        ("resumeDayNightCycle".to_string(), "resumeDayNightCycle".to_string()),
        ("setTimeOfDay".to_string(), "setTimeOfDay".to_string()),
        ("getTimeOfDay".to_string(), "getTimeOfDay".to_string()),
        ("setTimeSpeed".to_string(), "setTimeSpeed".to_string()),
        ("getTimeSpeed".to_string(), "getTimeSpeed".to_string()),
        ("enableCycle".to_string(), "enableCycle".to_string()),
        ("isCycleEnabled".to_string(), "isCycleEnabled".to_string()),
        ("setSunTimes".to_string(), "setSunTimes".to_string()),
        ("getSunTimes".to_string(), "getSunTimes".to_string()),
        ("getCycleInfo".to_string(), "getCycleInfo".to_string()),
        ("isDayTime".to_string(), "isDayTime".to_string()),
        ("isNightTime".to_string(), "isNightTime".to_string()),
        ("getSunPosition".to_string(), "getSunPosition".to_string()),
        ("getMoonPosition".to_string(), "getMoonPosition".to_string()),
        ("disposeCycle".to_string(), "disposeCycle".to_string()),

        // === SHADOW API ===
        ("createShadowGenerator".to_string(), "createShadowGenerator".to_string()),
        ("createOptimizedShadows".to_string(), "createOptimizedShadows".to_string()),
        ("setShadowMapSize".to_string(), "setShadowMapSize".to_string()),
        ("getShadowMapSize".to_string(), "getShadowMapSize".to_string()),
        ("setShadowDarkness".to_string(), "setShadowDarkness".to_string()),
        ("getShadowDarkness".to_string(), "getShadowDarkness".to_string()),
        ("setShadowBias".to_string(), "setShadowBias".to_string()),
        ("getShadowBias".to_string(), "getShadowBias".to_string()),
        ("enableCascadeShadows".to_string(), "enableCascadeShadows".to_string()),
        ("setShadowCascades".to_string(), "setShadowCascades".to_string()),
        ("addShadowCaster".to_string(), "addShadowCaster".to_string()),
        ("removeShadowCaster".to_string(), "removeShadowCaster".to_string()),
        ("addShadowReceiver".to_string(), "addShadowReceiver".to_string()),
        ("removeShadowReceiver".to_string(), "removeShadowReceiver".to_string()),
        ("enableShadowsForAllMeshes".to_string(), "enableShadowsForAllMeshes".to_string()),
        ("disableShadowsForAllMeshes".to_string(), "disableShadowsForAllMeshes".to_string()),
        ("getShadowGeneratorInfo".to_string(), "getShadowGeneratorInfo".to_string()),
        ("disposeShadowGenerator".to_string(), "disposeShadowGenerator".to_string()),
        ("findShadowGenerator".to_string(), "findShadowGenerator".to_string()),

        // === TEXTURE API ===
        ("createTexture".to_string(), "createTexture".to_string()),
        ("createCubeTexture".to_string(), "createCubeTexture".to_string()),
        ("createHDRCubeTexture".to_string(), "createHDRCubeTexture".to_string()),
        ("createDynamicTexture".to_string(), "createDynamicTexture".to_string()),
        ("loadTextureAsync".to_string(), "loadTextureAsync".to_string()),

        // === STRING FUNCTIONS ===
        ("contains".to_string(), "contains".to_string()),
        ("endsWith".to_string(), "endsWith".to_string()),
        ("startsWith".to_string(), "startsWith".to_string()),
        ("ext".to_string(), "hasExtension".to_string()),

    ]
}